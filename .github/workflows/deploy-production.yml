name: Deploy Production (Main Branch)

on:
  push:
    branches: [ main ]
  # This workflow runs when changes are merged to main branch
  # It includes CI tests before deployment to ensure production code quality

env:
  NODE_VERSION: '18.x'
  BUN_VERSION: 'latest'

jobs:
  # Job 1: Run CI Tests Before Deployment
  ci-tests:
    name: CI Tests (Production)
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run ESLint
        run: bun run lint
        
      - name: Check code formatting
        run: bun run format:check
        
      - name: Run backend tests
        run: bun run test:backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
          JWT_SECRET: test-secret-key
          
      - name: Install frontend dependencies
        working-directory: ./client
        run: bun install --frozen-lockfile
        
      - name: Run frontend tests
        working-directory: ./client
        run: bun test --run

  # Job 2: Deploy Frontend to GitHub Pages (Production)
  deploy-frontend-production:
    name: Deploy Frontend to GitHub Pages (Production)
    runs-on: ubuntu-latest
    needs: ci-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install frontend dependencies
        working-directory: ./client
        run: bun install --frozen-lockfile
        
      - name: Generate production environment file
        working-directory: ./client
        run: |
          cat > .env.production << EOF
          # Production Environment (Generated by CI/CD)
          REACT_APP_ENVIRONMENT=production
          REACT_APP_API_URL=${{ secrets.RENDER_PRODUCTION_URL }}/api
          REACT_APP_CLIENT_URL=${{ secrets.REACT_APP_CLIENT_URL_PRODUCTION }}
          REACT_APP_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }}
          PUBLIC_URL=${{ secrets.PUBLIC_URL_PRODUCTION }}
          GENERATE_SOURCEMAP=false
          EOF
          echo "✅ Generated .env.production with GitHub secrets"
        
      - name: Build frontend for production
        working-directory: ./client
        run: bun run build:production
        env:
          REACT_APP_API_URL: ${{ secrets.RENDER_PRODUCTION_URL }}/api
          REACT_APP_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }}
          REACT_APP_ENVIRONMENT: production
          PUBLIC_URL: ${{ secrets.PUBLIC_URL_PRODUCTION }}
          
      - name: Deploy to GitHub Pages (Production)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./client/build
          publish_branch: gh-pages
          keep_files: true
          exclude_assets: '.github,staging/**'
          
      - name: Frontend production deployment success
        run: |
          echo "✅ Frontend deployed to GitHub Pages (Production)"
          echo "🌐 URL: ${{ secrets.REACT_APP_CLIENT_URL_PRODUCTION }}"

  # Job 2: Trigger Render Backend Deployment (Production)
  deploy-backend-production:
    name: Deploy Backend to Render (Production)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Trigger Render Production Deploy
        run: |
          curl -X POST "${{ secrets.RENDER_PRODUCTION_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"ref": "main"}'
            
      - name: Wait for deployment
        run: sleep 180
        
      - name: Health check production backend
        run: |
          for i in {1..15}; do
            if curl -f "${{ secrets.RENDER_PRODUCTION_URL }}/api/health"; then
              echo "✅ Production backend health check passed"
              exit 0
            fi
            echo "⏳ Waiting for production backend... (attempt $i/15)"
            sleep 30
          done
          echo "❌ Production backend health check failed"
          exit 1
          
      - name: Backend production deployment success
        run: |
          echo "✅ Backend deployed to Render (Production)"
          echo "🚀 URL: ${{ secrets.RENDER_PRODUCTION_URL }}"

  # Job 3: Production deployment verification
  verify-production:
    name: Verify Production Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend-production, deploy-backend-production]
    
    steps:
      - name: Test production integration
        run: |
          echo "🧪 Testing production deployment..."
          
          # Test frontend
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.REACT_APP_CLIENT_URL_PRODUCTION }}")
          if [ "$FRONTEND_STATUS" = "200" ]; then
            echo "✅ Production frontend is accessible"
          else
            echo "❌ Production frontend not accessible (HTTP $FRONTEND_STATUS)"
            exit 1
          fi
          
          # Test backend API
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.RENDER_PRODUCTION_URL }}/api/health")
          if [ "$BACKEND_STATUS" = "200" ]; then
            echo "✅ Production backend API is accessible"
          else
            echo "❌ Production backend API not accessible (HTTP $BACKEND_STATUS)"
            exit 1
          fi
          
          echo "🎉 Production deployment successful!"
          echo "📱 Frontend: ${{ secrets.REACT_APP_CLIENT_URL_PRODUCTION }}"
          echo "🔧 Backend: ${{ secrets.RENDER_PRODUCTION_URL }}"
          
      - name: Send success notification
        if: success()
        run: |
          echo "🚀 Production deployment completed successfully!"
          echo "Environment: Production"
          echo "Branch: main"
          echo "Timestamp: $(date)"
