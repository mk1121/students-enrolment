name: Deploy Production (Main Branch)

on:
  push:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Deploy Frontend to GitHub Pages (Production)
  deploy-frontend-production:
    name: Deploy Frontend to GitHub Pages (Production)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install frontend dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Build frontend for production
        working-directory: ./client
        run: npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.RENDER_PRODUCTION_URL }}
          REACT_APP_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }}
          REACT_APP_ENVIRONMENT: production
          PUBLIC_URL: /students-enrolment
          
      - name: Deploy to GitHub Pages (Production)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./client/build
          publish_branch: gh-pages-production
          destination_dir: production
          
      - name: Frontend production deployment success
        run: |
          echo "‚úÖ Frontend deployed to GitHub Pages (Production)"
          echo "üåê URL: https://${{ github.repository_owner }}.github.io/students-enrolment/production"

  # Job 2: Trigger Render Backend Deployment (Production)
  deploy-backend-production:
    name: Deploy Backend to Render (Production)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Trigger Render Production Deploy
        run: |
          curl -X POST "${{ secrets.RENDER_PRODUCTION_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"ref": "main"}'
            
      - name: Wait for deployment
        run: sleep 180
        
      - name: Health check production backend
        run: |
          for i in {1..15}; do
            if curl -f "${{ secrets.RENDER_PRODUCTION_URL }}/api/health"; then
              echo "‚úÖ Production backend health check passed"
              exit 0
            fi
            echo "‚è≥ Waiting for production backend... (attempt $i/15)"
            sleep 30
          done
          echo "‚ùå Production backend health check failed"
          exit 1
          
      - name: Backend production deployment success
        run: |
          echo "‚úÖ Backend deployed to Render (Production)"
          echo "üöÄ URL: ${{ secrets.RENDER_PRODUCTION_URL }}"

  # Job 3: Production deployment verification
  verify-production:
    name: Verify Production Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend-production, deploy-backend-production]
    
    steps:
      - name: Test production integration
        run: |
          echo "üß™ Testing production deployment..."
          
          # Test frontend
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ github.repository_owner }}.github.io/students-enrolment/production")
          if [ "$FRONTEND_STATUS" = "200" ]; then
            echo "‚úÖ Production frontend is accessible"
          else
            echo "‚ùå Production frontend not accessible (HTTP $FRONTEND_STATUS)"
            exit 1
          fi
          
          # Test backend API
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.RENDER_PRODUCTION_URL }}/api/health")
          if [ "$BACKEND_STATUS" = "200" ]; then
            echo "‚úÖ Production backend API is accessible"
          else
            echo "‚ùå Production backend API not accessible (HTTP $BACKEND_STATUS)"
            exit 1
          fi
          
          echo "üéâ Production deployment successful!"
          echo "üì± Frontend: https://${{ github.repository_owner }}.github.io/students-enrolment/production"
          echo "üîß Backend: ${{ secrets.RENDER_PRODUCTION_URL }}"
          
      - name: Send success notification
        if: success()
        run: |
          echo "üöÄ Production deployment completed successfully!"
          echo "Environment: Production"
          echo "Branch: main"
          echo "Timestamp: $(date)"
