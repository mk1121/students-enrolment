name: Deploy Staging (Develop Branch)

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
    types: [closed]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  BUN_VERSION: 'latest'

jobs:
  # Job 1: Deploy Frontend to GitHub Pages (Staging)
  deploy-frontend-staging:
    name: Deploy Frontend to GitHub Pages (Staging)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install frontend dependencies
        working-directory: ./client
        run: bun install --frozen-lockfile
        
      - name: Generate staging environment file
        working-directory: ./client
        run: |
          cat > .env.staging << EOF
          # Staging Environment (Generated by CI/CD)
          REACT_APP_ENVIRONMENT=staging
          REACT_APP_API_URL=${{ secrets.RENDER_STAGING_URL }}/api
          REACT_APP_CLIENT_URL=https://${{ github.repository_owner }}.github.io/students-enrolment/staging
          REACT_APP_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_STAGING }}
          PUBLIC_URL=/students-enrolment/staging
          GENERATE_SOURCEMAP=true
          EOF
          echo "✅ Generated .env.staging with GitHub secrets"
        
      - name: Build frontend for staging
        working-directory: ./client
        run: bun run build:staging
          
      - name: Clean staging directory only
        run: |
          # Clone the gh-pages branch to clean only staging directory
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-temp
          cd gh-pages-temp
          
          # Remove only staging directory contents, keep everything else
          if [ -d "staging" ]; then
            rm -rf staging/*
            echo "✅ Cleaned staging directory contents"
          else
            echo "ℹ️ No staging directory found to clean"
          fi
          
          # Commit the cleanup if there are changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Clean staging directory before new deployment"
            git push origin gh-pages
            echo "✅ Pushed staging directory cleanup"
          else
            echo "ℹ️ No changes to commit"
          fi
          
          cd ..
          rm -rf gh-pages-temp
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./client/build
          publish_branch: gh-pages
          destination_dir: staging
          keep_files: true
          
      - name: Frontend deployment success notification
        run: |
          echo "✅ Frontend deployed to GitHub Pages"
          echo "🌐 URL: https://${{ github.repository_owner }}.github.io/students-enrolment/staging"

  # Job 2: Trigger Render Backend Deployment
  deploy-backend-staging:
    name: Trigger Render Backend Deployment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Trigger Render Deploy Hook
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_DEVELOP }}" \
            -H "Content-Type: application/json" \
            -d '{"ref": "develop"}'
            
      - name: Wait for deployment
        run: sleep 120
        
      - name: Health check backend
        run: |
          for i in {1..10}; do
            if curl -f "${{ secrets.RENDER_STAGING_URL }}/api/health"; then
              echo "✅ Backend health check passed"
              exit 0
            fi
            echo "⏳ Waiting for backend to be ready... (attempt $i/10)"
            sleep 30
          done
          echo "❌ Backend health check failed"
          exit 1
          
      - name: Backend deployment success notification
        run: |
          echo "✅ Backend deployed to Render"
          echo "🚀 URL: ${{ secrets.RENDER_STAGING_URL }}"

  # Job 3: Integration test staging deployment
  test-staging-integration:
    name: Test Staging Integration
    runs-on: ubuntu-latest
    needs: [deploy-frontend-staging, deploy-backend-staging]
    
    steps:
      - name: Wait for GitHub Pages propagation
        run: sleep 60
        
      - name: Test frontend-backend connectivity
        run: |
          echo "🧪 Testing staging integration..."
          
          # Test frontend with proper GitHub Pages URL handling
          echo "🔍 Testing frontend at: https://${{ github.repository_owner }}.github.io/students-enrolment/staging/"
          FRONTEND_STATUS=$(curl -s -L -o /dev/null -w "%{http_code}" "https://${{ github.repository_owner }}.github.io/students-enrolment/staging/")
          
          if [ "$FRONTEND_STATUS" = "200" ]; then
            echo "✅ Frontend is accessible (HTTP $FRONTEND_STATUS)"
          elif [ "$FRONTEND_STATUS" = "301" ] || [ "$FRONTEND_STATUS" = "302" ]; then
            echo "⚠️ Frontend returned redirect (HTTP $FRONTEND_STATUS) - trying alternative URLs"
            
            # Try with index.html directly
            FRONTEND_INDEX=$(curl -s -L -o /dev/null -w "%{http_code}" "https://${{ github.repository_owner }}.github.io/students-enrolment/staging/index.html")
            if [ "$FRONTEND_INDEX" = "200" ]; then
              echo "✅ Frontend accessible via index.html (HTTP $FRONTEND_INDEX)"
            else
              echo "⚠️ Frontend index.html returned HTTP $FRONTEND_INDEX"
            fi
            
            # Try without trailing slash but with redirect following
            FRONTEND_NO_SLASH=$(curl -s -L -o /dev/null -w "%{http_code}" "https://${{ github.repository_owner }}.github.io/students-enrolment/staging")
            if [ "$FRONTEND_NO_SLASH" = "200" ]; then
              echo "✅ Frontend accessible without trailing slash (HTTP $FRONTEND_NO_SLASH)"
            else
              echo "⚠️ Frontend without slash returned HTTP $FRONTEND_NO_SLASH"
            fi
            
            echo "📝 Note: GitHub Pages may need 5-10 minutes to fully propagate new deployments"
            echo "🔗 Manual check recommended: https://${{ github.repository_owner }}.github.io/students-enrolment/staging/"
          else
            echo "❌ Frontend not accessible (HTTP $FRONTEND_STATUS)"
            echo "🔗 URL tested: https://${{ github.repository_owner }}.github.io/students-enrolment/staging/"
            echo "📝 This may be due to GitHub Pages propagation delay or configuration issues"
          fi
          
          # Test backend API (this should work immediately)
          echo "🔍 Testing backend at: ${{ secrets.RENDER_STAGING_URL }}/api/health"
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.RENDER_STAGING_URL }}/api/health")
          if [ "$BACKEND_STATUS" = "200" ]; then
            echo "✅ Backend API is accessible (HTTP $BACKEND_STATUS)"
          else
            echo "❌ Backend API not accessible (HTTP $BACKEND_STATUS)"
            exit 1
          fi
          
          echo "🎉 Staging deployment completed!"
          echo "📱 Frontend: https://${{ github.repository_owner }}.github.io/students-enrolment/staging/"
          echo "🔧 Backend: ${{ secrets.RENDER_STAGING_URL }}"
          echo "⏰ If frontend shows issues, wait 5-10 minutes for GitHub Pages propagation"
