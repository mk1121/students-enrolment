version: '3.8'

services:
  # MongoDB Database - Production Configuration
  mongodb:
    image: mongo:6.0
    container_name: students-enrollment-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    ports:
      - "127.0.0.1:27017:27017"  # Only bind to localhost
    volumes:
      - /var/lib/mongodb:/data/db  # Use host volume for persistence
      - ./mongodb-init:/docker-entrypoint-initdb.d:ro
    networks:
      - students-network
    command: ["mongod", "--auth", "--bind_ip_all", "--wiredTigerCacheSizeGB", "2"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ping: 1})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    container_name: students-enrollment-redis-prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    volumes:
      - /var/lib/redis:/data
    networks:
      - students-network
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main Application - Production Configuration
  app:
    image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG:-latest}
    container_name: students-enrollment-app-prod
    restart: always
    ports:
      - "127.0.0.1:5000:5000"  # Only bind to localhost (behind nginx)
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DB_NAME}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SSLCOMMERZ_STORE_ID: ${SSLCOMMERZ_STORE_ID}
      SSLCOMMERZ_STORE_PASSWORD: ${SSLCOMMERZ_STORE_PASSWORD}
      SSLCOMMERZ_IS_LIVE: ${SSLCOMMERZ_IS_LIVE:-true}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      CLIENT_URL: ${CLIENT_URL}
      SERVER_URL: ${SERVER_URL}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - students-network
    volumes:
      - /var/www/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx Reverse Proxy - Production Configuration
  nginx:
    image: nginx:alpine
    container_name: students-enrollment-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - students-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Aggregation - Filebeat (Optional)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: students-enrollment-filebeat
    restart: always
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      KIBANA_HOST: ${KIBANA_HOST}
    networks:
      - students-network
    profiles:
      - logging

  # Application Monitoring
  node-exporter:
    image: prom/node-exporter:latest
    container_name: students-enrollment-node-exporter
    restart: always
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - students-network
    profiles:
      - monitoring

networks:
  students-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 